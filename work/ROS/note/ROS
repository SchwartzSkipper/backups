source setup.bash

%%When you "source" something in bash, it will execute each line of the file as is it were typed into the current shell. This is contrasted to actually executing the script, which will be run in a new shell
%%source这些文件中(build,devel)的任何一个都可以将当前工作空间设置在ROS工作环境的最顶层 即ROS_PACKAGE_PATH

------------------------------------------------------------------------------------------------------

Navigating the ROS filesystem
rospack find roscpp
%% to find roscpp package
roscd
rosls

------------------------------------------------------------------------------------------------------

Creating ROS Packages
//to list the dependencies of a package:
catkin_create_pkg <pkg_name> [dep1][dep2][dep3]
rospack depends1 <pkg_name>
//customizing pkg
cat package.xml
nano package.xml

------------------------------------------------------------------------------------------------------

Building ROS Packages
catkin_make combines the calls to cmake and make in the standard CMake workflow.
# In a catkin workspace
$ catkin_make [make_targets] [-DCMAKE_VARIABLES=...]
# In a catkin workspace, when your projects are not in the /src directory
$ catkin_make --source my_src
$ catkin_make install --source my_src  # (optionally)
build 目录是build space的默认所在位置，同时cmake 和 make也是在这里被调用来配置并编译你的程序包。devel 目录是devel space的默认所在位置, 同时也是在你安装程序包之前存放可执行文件和库文件的地方。


------------------------------------------------------------------------------------------------------

ROS Nodes
Nodes: A node is an executable that uses ROS to communicate with other nodes.
Messages: ROS data type used when subscribing or publishing to a topic.
Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.
Master: Name service for ROS (i.e. helps nodes find each other)
rosout: ROS equivalent of stdout/stderr
roscore: Master + rosout + parameter server (parameter server will be introduced later)

rosout:  This is always running as it collects and logs nodes' debugging output.这个节点用于收集和记录节点tiao试输出信息，所以它总是在运行的。

rosnode list:   displays information about the ROS nodes that are currently running.
rosnode info /rosout
rosrun <pkg> [node_name] //rosrun allows you to use the package name to directly run a node within a package
//ros 可以通过命令行重新配置名称,使用Remapping Argument改变节点名称
remapping arguments   //http://wiki.ros.org/Remapping%20Arguments
rosnode ping my_turtle   //test the turtlesim


------------------------------------------------------------------------------------------------------


ROS Topics
$ rosrun rqt_graph rqt_graph
rosrun rqt_plot rqt_plot
//present the relationships of nodes and the topic whether sub or pub in graphics
rostopic bw     //display bandwidth used by topic
rostopic echo   //print messages to screen
rostopic hz     //display publishing rate of topic
rostopic list   //print information about active topics
rostopic pub    //publish data to topic
rostopic type   //print topic type, returns the message type of any topic being published.
//The rostopic tool allows you to get information about ROS topics.rostopic echo shows the data published on a topic.

rostopic echo /turtle1/cmd_vel
rostopic list -v  //list the sub or pub info in detail.

rostopic pub [topic] [msg_type] [args]
example: $ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'
// -- This option (double-dash) tells the option parser that none of the following arguments is an option. This is required in cases where your arguments have a leading dash -, like negative numbers.
//'[2.0, 0.0, 0.0]' These arguments are actually in YAML syntax,一般而言，YAML的表述很自然：1 是整型, 1.0 是浮点型, one是字符串, true是布尔, [1, 2, 3]是整型列表, {a: b, c: d}是字典.

Usage: rostopic pub /topic type [args...]
Options:
  -h, --help            show this help message and exit
  -v                    print verbose output
  -r RATE, --rate=RATE  publishing rate (hz).  For -f and stdin input, this
                        defaults to 10.  Otherwise it is not set.
  -1, --once            publish one message and exit
  -f FILE, --file=FILE  read args from YAML file (Bagy)
  -l, --latch           enable latching for -f, -r and piped input.  This
                        latches the first message.
  -s, --substitute-keywords
                        When publishing with a rate, performs keyword ('now'
                        or 'auto') substitution for each message

rostopic hz [topic]
Usage: rostopic hz /topic
// to show the frequency at which the data is published
Options:
  -h, --help            show this help message and exit
  -w WINDOW, --window=WINDOW
                        window size, in # of messages, for calculating rate
  --filter=EXPR         only measure messages matching the specified Python
                        expression
  --wall-time           calculates rate using wall time which can be helpful
                        when clock isnt published during simulation

rostopic type /turtle1/cmd_vel | rosmsg show
//show the type of topic also the specific message type

rosmsg
	rosmsg show	//Show message description
	rosmsg list	//List all messages
	rosmsg md5	//Display message md5sum
	rosmsg package	//List messages in a package
	rosmsg packages	//List packages that contain messages


------------------------------------------------------------------------------------------------------


ROS Services
Services are another way that nodes can communicate with each other. Services allow nodes to send a request and receive a response.
rosservice list         输出可用服务的信息
rosservice call         调用带参数的服务
rosservice type         输出服务类型
rosservice find         依据类型寻找服务find services by service type
rosservice uri          输出服务的ROSRPC uri

rosservice type reset | rossrv show
//rossrv: present the description of a specific type of Service


rosparam is a command-line tool for getting, setting, and deleting parameters from the ROS Parameter Server.
Commands:
	rosparam set	//set parameter
	rosparam get	//get parameter
	rosparam load	//load parameters from file
	rosparam dump	//dump parameters to file
	rosparam delete	//delete parameter
	rosparam list	//list parameter names
rosparam get /  %% get all of the paras in the parameter server

rosparam dump [file_name]
rosparam load [options] file [namespace]


------------------------------------------------------------------------------------------------------


rqt_console & roslaunch
$ rosrun rqt_console rqt_console
$ rosrun rqt_logger_level rqt_logger_level


Launch 文件解析
现在我们开始逐句解析launch xml文件。
<launch>
在这里我们以launch标签开头以表明这是一个launch文件。
  <group ns="turtlesim1">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>
  <group ns="turtlesim2">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>
在这里我们创建了两个节点分组并以'命名空间（namespace)'标签来区分，其中一个名为turtulesim1，另一个名为turtlesim2，两个组里面都使用相同的turtlesim节点并命名为'sim'。这样可以让我们同时启动两个turtlesim模拟器而不会产生命名冲突。

  <node pkg="turtlesim" name="mimic" type="mimic">
    <remap from="input" to="turtlesim1/turtle1"/>
    <remap from="output" to="turtlesim2/turtle1"/>
  </node>
在这里我们启动模仿节点，并将所有话题的输入和输出分别重命名为turtlesim1和turtlesim2，这样就会使turtlesim2模仿turtlesim1。
</launch>

$ roslaunch beginner_tutorials turtlemimic.launch


------------------------------------------------------------------------------------------------------


Creating a ROS msg and srv
消息(msg): msg文件就是一个描述ROS中所使用消息类型的简单文本。它们会被用来生成不同语言的源代码。
服务(srv): 一个srv文件描述一项服务。它包含两个部分：请求和响应。
msg文件存放在package的msg目录下，srv文件则存放在srv目录下。
在ROS中有一个特殊的数据类型：Header，它含有时间戳和坐标系信息。在msg文件的第一行经常可以看到

rosmsg show Name
rossrv show Name


------------------------------------------------------------------------------------------------------


Creating simple msg pub and sub


------------------------------------------------------------------------------------------------------

global planner 全局路径规划:  直接调用navfn程序包
编译ROS程序时用rosbuild或catkin_make,本质上还是基于cmake的，只是写了个shell脚本把cmake的命令集合一下，运行程序虽然用rosrun命令，本质和运行./bin（编译生成的二进制文件）一样

message geometry_msgs/Twist 消息类型为 Vector3 linear; Vector3 angular
该例中，linear 和 angular 都是复合域，其数据类型是 geometry_msgs/Vector3。缩进格式表示命名为x，y和z的域，是对应的上级两个域之一的成员.

------------------------------------------------------------------------------------------------------
ROS调试，动态参数调试：
rosrun rqt_reconfigure rqt_reconfigure


------------------------------------------------------------------------------------------------------
ROS_INFO():
for data type double  msg:
ROS_INFO([%f],msg);



//#line 2 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
// 
// File autogenerated for the rsband_local_planner package 
// by the dynamic_reconfigure package.
// Please do not edit.
// added by Gou
// ********************************************************/

#ifndef __rsband_local_planner__RSBandPlannerConfig_H__
#define __rsband_local_planner__RSBandPlannerConfig_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace rsband_local_planner
{
  class RSBandPlannerConfigStatics;
  
  class RSBandPlannerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(RSBandPlannerConfig &config, const RSBandPlannerConfig &max, const RSBandPlannerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RSBandPlannerConfig &config1, const RSBandPlannerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RSBandPlannerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RSBandPlannerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RSBandPlannerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RSBandPlannerConfig &config) const = 0;
      virtual void getValue(const RSBandPlannerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T RSBandPlannerConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (RSBandPlannerConfig::* field);

      virtual void clamp(RSBandPlannerConfig &config, const RSBandPlannerConfig &max, const RSBandPlannerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RSBandPlannerConfig &config1, const RSBandPlannerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RSBandPlannerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RSBandPlannerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RSBandPlannerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RSBandPlannerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RSBandPlannerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RSBandPlannerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string name, std::string type, int parent, int id, bool s, T PT::* f) : AbstractGroupDescription(name, type, parent, id, s), field(f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RSBandPlannerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<RSBandPlannerConfig::AbstractGroupDescriptionConstPtr> groups;
    };
    
class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RSBandPlannerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("stop"==(*_i)->name){stop = boost::any_cast<bool>(val);}
        if("allow_unknown"==(*_i)->name){allow_unknown = boost::any_cast<bool>(val);}
        if("display_planner_output"==(*_i)->name){display_planner_output = boost::any_cast<bool>(val);}
        if("robot_state_valid"==(*_i)->name){robot_state_valid = boost::any_cast<bool>(val);}
        if("display_controller_io"==(*_i)->name){display_controller_io = boost::any_cast<bool>(val);}
        if("emergency_planning"==(*_i)->name){emergency_planning = boost::any_cast<bool>(val);}
        if("max_speed"==(*_i)->name){max_speed = boost::any_cast<double>(val);}
        if("max_steering_angle"==(*_i)->name){max_steering_angle = boost::any_cast<double>(val);}
        if("wheelbase"==(*_i)->name){wheelbase = boost::any_cast<double>(val);}
        if("xy_goal_tolerance"==(*_i)->name){xy_goal_tolerance = boost::any_cast<double>(val);}
        if("yaw_goal_tolerance"==(*_i)->name){yaw_goal_tolerance = boost::any_cast<double>(val);}
        if("max_planning_duration"==(*_i)->name){max_planning_duration = boost::any_cast<double>(val);}
        if("update_sub_goal_dist_threshold"==(*_i)->name){update_sub_goal_dist_threshold = boost::any_cast<double>(val);}
        if("goal_dist_threshold"==(*_i)->name){goal_dist_threshold = boost::any_cast<double>(val);}
        if("lateral_deviation_tolerance"==(*_i)->name){lateral_deviation_tolerance = boost::any_cast<double>(val);}
        if("rear_steering_mode"==(*_i)->name){rear_steering_mode = boost::any_cast<int>(val);}
        if("eband_to_rs_strategy"==(*_i)->name){eband_to_rs_strategy = boost::any_cast<int>(val);}
        if("state_checking_mode"==(*_i)->name){state_checking_mode = boost::any_cast<int>(val);}
        if("interpolation_num_poses"==(*_i)->name){interpolation_num_poses = boost::any_cast<int>(val);}
        if("valid_state_max_cost"==(*_i)->name){valid_state_max_cost = boost::any_cast<int>(val);}
      }
    }

bool stop;
bool allow_unknown;
bool display_planner_output;
bool robot_state_valid;
bool display_controller_io;
bool emergency_planning;

double max_speed;
double max_steering_angle;
double wheelbase;
double xy_goal_tolerance;
double yaw_goal_tolerance;
double max_planning_duration;
double update_sub_goal_dist_threshold;
double goal_dist_threshold;
double lateral_deviation_tolerance;

int rear_steering_mode;
int eband_to_rs_strategy;
int state_checking_mode;
int interpolation_num_poses;
int valid_state_max_cost;


    bool state;
    std::string name;

    
}groups;



//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool stop;
      bool allow_unknown;
      bool display_planner_output;
      bool robot_state_valid;
      bool display_controller_io;
      bool emergency_planning;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_speed;
      double max_steering_angle;
      double wheelbase;
      double xy_goal_tolerance;
      double yaw_goal_tolerance;
      double max_planning_duration;
      double update_sub_goal_dist_threshold;
      double goal_dist_threshold;
      double lateral_deviation_tolerance;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int rear_steering_mode;
      int eband_to_rs_strategy;
      int state_checking_mode;
      int interpolation_num_poses;
      int valid_state_max_cost;
//#line 218 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RSBandPlannerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RSBandPlannerConfig &__max__ = __getMax__();
      const RSBandPlannerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RSBandPlannerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RSBandPlannerConfig &__getDefault__();
    static const RSBandPlannerConfig &__getMax__();
    static const RSBandPlannerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();
    
  private:
    static const RSBandPlannerConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void RSBandPlannerConfig::ParamDescription<std::string>::clamp(RSBandPlannerConfig &config, const RSBandPlannerConfig &max, const RSBandPlannerConfig &min) const
  {
    return;
  }

  class RSBandPlannerConfigStatics
  {
    friend class RSBandPlannerConfig;
    
    RSBandPlannerConfigStatics()
    {
RSBandPlannerConfig::GroupDescription<RSBandPlannerConfig::DEFAULT, RSBandPlannerConfig> Default("Default", "", 0, 0, true, &RSBandPlannerConfig::groups);
//bool:     
      __min__.stop = 0;
      __max__.stop = 1;
      __default__.stop = 0;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("stop", "bool", 0, "When stop is true publish zero velocity commands", "", &RSBandPlannerConfig::stop)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("stop", "bool", 0, "When stop is true publish zero velocity commands", "", &RSBandPlannerConfig::stop)));
      __min__.allow_unknown = 0;
      __max__.allow_unknown = 1;
      __default__.allow_unknown = 1;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("allow_unknown", "bool", 0, "Determines perception of unknown costmap cells as traversable or not", "", &RSBandPlannerConfig::allow_unknown)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("allow_unknown", "bool", 0, "Determines perception of unknown costmap cells as traversable or not", "", &RSBandPlannerConfig::allow_unknown)));
      __min__.display_planner_output = 0;
      __max__.display_planner_output = 1;
      __default__.display_planner_output = 0;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("display_planner_output", "bool", 0, "If true, the node displays planning output from ompl reeds shepp state space", "", &RSBandPlannerConfig::display_planner_output)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("display_planner_output", "bool", 0, "If true, the node displays planning output from ompl reeds shepp state space", "", &RSBandPlannerConfig::display_planner_output)));
      __min__.robot_state_valid = 0;
      __max__.robot_state_valid = 1;
      __default__.robot_state_valid = 0;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("robot_state_valid", "bool", 0, "Determines whether robot state is considered always valid, even close to obstacles", "", &RSBandPlannerConfig::robot_state_valid)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("robot_state_valid", "bool", 0, "Determines whether robot state is considered always valid, even close to obstacles", "", &RSBandPlannerConfig::robot_state_valid)));
      __min__.display_controller_io = 0;
      __max__.display_controller_io = 1;
      __default__.display_controller_io = 0;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("display_controller_io", "bool", 0, "If true, display controller input and output information", "", &RSBandPlannerConfig::display_controller_io)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("display_controller_io", "bool", 0, "If true, display controller input and output information", "", &RSBandPlannerConfig::display_controller_io)));
      __min__.emergency_planning = 0;
      __max__.emergency_planning = 1;
      __default__.emergency_planning = 1;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("emergency_planning", "bool", 0, "Determines whether emergency planning will be used in case of planning fails", "", &RSBandPlannerConfig::emergency_planning)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("emergency_planning", "bool", 0, "Determines whether emergency planning will be used in case of planning fails", "", &RSBandPlannerConfig::emergency_planning)));
//double:
      __min__.max_speed = 0.1;
      __max__.max_speed = 2.8;
      __default__.max_speed = 0.5;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_speed", "double", 0, "The maximum speed of the robot", "", &RSBandPlannerConfig::max_speed)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_speed", "double", 0, "The maximum speed of the robot", "", &RSBandPlannerConfig::max_speed)));
      __min__.max_steering_angle = 0.5;
      __max__.max_steering_angle = 1.57;
      __default__.max_steering_angle = 1.57;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_steering_angle", "double", 0, "The maximum steering angle of the virtual middle wheel", "", &RSBandPlannerConfig::max_steering_angle)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_steering_angle", "double", 0, "The maximum steering angle of the virtual middle wheel", "", &RSBandPlannerConfig::max_steering_angle)));
      __min__.wheelbase = 1.359;
      __max__.wheelbase = 1.425;
      __default__.wheelbase = 1.392;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("wheelbase", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::wheelbase)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("wheelbase", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::wheelbase)));
      __min__.xy_goal_tolerance = 0.01;
      __max__.xy_goal_tolerance = 1.0;
      __default__.xy_goal_tolerance = 0.05;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::xy_goal_tolerance)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("xy_goal_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::xy_goal_tolerance)));
      __min__.yaw_goal_tolerance = 0.5;
      __max__.yaw_goal_tolerance = 5.0;
      __default__.yaw_goal_tolerance = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::yaw_goal_tolerance)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("yaw_goal_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::yaw_goal_tolerance)));
      __min__.max_planning_duration = 0.5;
      __max__.max_planning_duration = 5.0;
      __default__.max_planning_duration = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_planning_duration", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::max_planning_duration)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("max_planning_duration", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::max_planning_duration)));
      __min__.update_sub_goal_dist_threshold = 0.5;
      __max__.update_sub_goal_dist_threshold = 5.0;
      __default__.update_sub_goal_dist_threshold = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("update_sub_goal_dist_threshold", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::update_sub_goal_dist_threshold)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("update_sub_goal_dist_threshold", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::update_sub_goal_dist_threshold)));
      __min__.goal_dist_threshold = 0.5;
      __max__.goal_dist_threshold = 5.0;
      __default__.goal_dist_threshold = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("goal_dist_threshold", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::goal_dist_threshold)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("goal_dist_threshold", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::goal_dist_threshold)));
      __min__.lateral_deviation_tolerance = 0.5;
      __max__.lateral_deviation_tolerance = 5.0;
      __default__.lateral_deviation_tolerance = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("lateral_deviation_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::lateral_deviation_tolerance)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<double>("lateral_deviation_tolerance", "double", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::lateral_deviation_tolerance)));
//int:
      __min__.lateral_deviation_tolerance = 0.5;
      __max__.lateral_deviation_tolerance = 5.0;
      __default__.lateral_deviation_tolerance = 0.01;
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<int>("lateral_deviation_tolerance", "int", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::lateral_deviation_tolerance)));
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<int>("lateral_deviation_tolerance", "int", 0, "The maximum distance from path endpoint to goal point", "", &RSBandPlannerConfig::lateral_deviation_tolerance)));


      //#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.retrace_path = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.retrace_path = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.retrace_path = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("retrace_path", "bool", 0, "Retrace path", "", &RSBandPlannerConfig::retrace_path)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("retrace_path", "bool", 0, "Retrace path", "", &RSBandPlannerConfig::retrace_path)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_goal_direction = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_goal_direction = 1;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_goal_direction = 0;
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("use_goal_direction", "bool", 0, "Use the goal direction as the direction of path end point", "", &RSBandPlannerConfig::use_goal_direction)));
//#line 280 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RSBandPlannerConfig::AbstractParamDescriptionConstPtr(new RSBandPlannerConfig::ParamDescription<bool>("use_goal_direction", "bool", 0, "Use the goal direction as the direction of path end point", "", &RSBandPlannerConfig::use_goal_direction)));
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 235 "/opt/ros/indigo/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RSBandPlannerConfig::AbstractGroupDescriptionConstPtr(new RSBandPlannerConfig::GroupDescription<RSBandPlannerConfig::DEFAULT, RSBandPlannerConfig>(Default)));
//#line 353 "/opt/ros/indigo/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RSBandPlannerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__); 
    }
    std::vector<RSBandPlannerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RSBandPlannerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RSBandPlannerConfig __max__;
    RSBandPlannerConfig __min__;
    RSBandPlannerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RSBandPlannerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RSBandPlannerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RSBandPlannerConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const RSBandPlannerConfig &RSBandPlannerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const RSBandPlannerConfig &RSBandPlannerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const RSBandPlannerConfig &RSBandPlannerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<RSBandPlannerConfig::AbstractParamDescriptionConstPtr> &RSBandPlannerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RSBandPlannerConfig::AbstractGroupDescriptionConstPtr> &RSBandPlannerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RSBandPlannerConfigStatics *RSBandPlannerConfig::__get_statics__()
  {
    const static RSBandPlannerConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RSBandPlannerConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __FIXEDGLOBALPLANNERRECONFIGURATOR_H__
